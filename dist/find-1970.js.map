{"version":3,"file":"find-1970.js","sources":["../src/oceanUtils.ts","../src/find.ts","../src/find-1970.ts"],"sourcesContent":["type OceanZone = {\n  left: number\n  right: number\n  tzid: string\n}\n\nexport const oceanZones: OceanZone[] = [\n  { tzid: 'Etc/GMT-12', left: 172.5, right: 180 },\n  { tzid: 'Etc/GMT-11', left: 157.5, right: 172.5 },\n  { tzid: 'Etc/GMT-10', left: 142.5, right: 157.5 },\n  { tzid: 'Etc/GMT-9', left: 127.5, right: 142.5 },\n  { tzid: 'Etc/GMT-8', left: 112.5, right: 127.5 },\n  { tzid: 'Etc/GMT-7', left: 97.5, right: 112.5 },\n  { tzid: 'Etc/GMT-6', left: 82.5, right: 97.5 },\n  { tzid: 'Etc/GMT-5', left: 67.5, right: 82.5 },\n  { tzid: 'Etc/GMT-4', left: 52.5, right: 67.5 },\n  { tzid: 'Etc/GMT-3', left: 37.5, right: 52.5 },\n  { tzid: 'Etc/GMT-2', left: 22.5, right: 37.5 },\n  { tzid: 'Etc/GMT-1', left: 7.5, right: 22.5 },\n  { tzid: 'Etc/GMT', left: -7.5, right: 7.5 },\n  { tzid: 'Etc/GMT+1', left: -22.5, right: -7.5 },\n  { tzid: 'Etc/GMT+2', left: -37.5, right: -22.5 },\n  { tzid: 'Etc/GMT+3', left: -52.5, right: -37.5 },\n  { tzid: 'Etc/GMT+4', left: -67.5, right: -52.5 },\n  { tzid: 'Etc/GMT+5', left: -82.5, right: -67.5 },\n  { tzid: 'Etc/GMT+6', left: -97.5, right: -82.5 },\n  { tzid: 'Etc/GMT+7', left: -112.5, right: -97.5 },\n  { tzid: 'Etc/GMT+8', left: -127.5, right: -112.5 },\n  { tzid: 'Etc/GMT+9', left: -142.5, right: -127.5 },\n  { tzid: 'Etc/GMT+10', left: -157.5, right: -142.5 },\n  { tzid: 'Etc/GMT+11', left: -172.5, right: -157.5 },\n  { tzid: 'Etc/GMT+12', left: -180, right: -172.5 },\n]\n\n/**\n * Find the Etc/GMT* timezone name(s) corresponding to the given longitue.\n *\n * @param lon The longitude to analyze\n * @returns An array of strings of TZIDs\n */\nexport function getTimezoneAtSea(lon: number): string[] {\n  // coordinates along the 180 longitude should return two zones\n  if (lon === -180 || lon === 180) {\n    return ['Etc/GMT+12', 'Etc/GMT-12']\n  }\n  const tzs = []\n  for (let i = 0; i < oceanZones.length; i++) {\n    const z = oceanZones[i]\n    if (z.left <= lon && z.right >= lon) {\n      tzs.push(z.tzid)\n    } else if (z.right < lon) {\n      break\n    }\n  }\n  return tzs\n}\n","import { File } from 'expo-file-system/next'\n\nimport { decode } from 'geobuf'\nimport inside from '@turf/boolean-point-in-polygon'\nimport { point } from '@turf/helpers'\nimport Pbf from 'pbf'\n\nimport { getTimezoneAtSea, oceanZones } from './oceanUtils'\n\n// NOTE: 使わない前提で適当な値に置き換えた\nconst fs = undefined\n\ntype MapLike = {\n  get(key: string): any\n  set(key: string, value: any): void\n}\n\nexport type CacheOptions = {\n  /**\n   * If set to true, all features will be loaded into memory to shorten future lookup\n   * times.\n   */\n  preload?: boolean\n  /**\n   * Must be a map-like object with a `get` and `set` function.\n   */\n  store?: MapLike\n}\n\n/**\n * Set caching behavior and return feature cache.\n *\n * @param tzData The index data of the timezeone data product\n * @param {string} featureFilePath The path to the binary geo.dat file for the timezeone data product\n * @param {CacheOptions} options cachine options.\n */\nexport function setCacheLevel(\n  tzData: any,\n  featureFilePath: string,\n  options?: CacheOptions,\n): Map<string, any> {\n  let featureCache\n  if (\n    options &&\n    options.store &&\n    typeof options.store.get === 'function' &&\n    typeof options.store.set === 'function'\n  ) {\n    featureCache = options.store\n  } else {\n    featureCache = new Map()\n  }\n  if (options && options.preload) {\n    const featureFileFd = fs.openSync(featureFilePath, 'r')\n\n    if (featureFileFd < 0) {\n      throw new Error('Failed to open geo.dat file')\n    }\n\n    _preCache(tzData, featureFilePath, featureFileFd, featureCache)\n\n    fs.closeSync(featureFileFd)\n  }\n  return featureCache\n}\n\n/**\n * A function that will load all features into an unexpiring cache\n *\n * @param tzData\n * @param {string} featureFilePath\n * @param {number} featureFileFd\n * @param featureCache\n * @returns {void}\n */\nfunction _preCache(\n  tzData: any,\n  featureFilePath: string,\n  featureFileFd: number,\n  featureCache: MapLike,\n) {\n  // shoutout to github user @magwo for an initial version of this recursive function\n  function preloadFeaturesRecursive(curTzData, quadPos: string) {\n    if (curTzData.pos >= 0 && curTzData.len) {\n      const geoJson = loadFeatures(\n        featureFilePath,\n        curTzData.pos,\n        curTzData.len,\n        featureFileFd,\n      )\n      featureCache.set(quadPos, geoJson)\n    } else if (typeof curTzData === 'object') {\n      Object.getOwnPropertyNames(curTzData).forEach((value) => {\n        preloadFeaturesRecursive(curTzData[value], quadPos + value)\n      })\n    }\n  }\n  preloadFeaturesRecursive(tzData.lookup, '')\n}\n\n/**\n * Load features from geo.dat at offset pos with length len.\n * Optionally accept a file descriptor\n *\n * @param featureFilePath\n * @param pos\n * @param len\n * @param fd\n * @returns the GeoJSON features in within the given quad region as defined in the\n *  feature file data.\n */\nfunction loadFeatures(\n  featureFilePath: string,\n  pos: number,\n  len: number,\n  fd: number = -1,\n) {\n  // WARNING: 以下を前提とする。なおこれ以外の方法、例えば expo-asset のプラグインによる事前ロードなどはうまくいかなかった。\n  //   1. 親プロジェクト側で metro.config.js の assetExts に 'dat' を追加して dat ファイルをアセットバンドリングの対象にする。\n  //   2. 親プロジェクト側で起動時に `Asset.loadAsync(require(\"./node_modules/geo-tz/data/timezones-1970.geojson.geo.dat\"))` を実行して dat ファイルを事前ロードする。(Expo の開発ビルドではアセットファイルはバンドルされず非同期で適宜ダウンロードすることになる。それを先にやっておくことで同期関数を保ち変更を最小限にとどめる)\n  //   3. 何かしらの方法で asset の localUri を受け渡す。最も簡単な globalThis を採用。\n  const file = new File(globalThis.geoTzFeatureFilePath).open()\n  file.offset = pos\n\n  const buf = file.readBytes(len)\n\n  const data = new Pbf(buf)\n  return decode(data)\n}\n\n/**\n * Find the timezone ID(s) at the given GPS coordinates.\n *\n * @param tzData The indexed lookup dataset to use\n * @param featureCache The appropriate featureCache to use\n * @param featureFilePath The appropriate featureFilePath to use\n * @param lat latitude (must be >= -90 and <=90)\n * @param lon longitue (must be >= -180 and <=180)\n * @returns An array of string of TZIDs at the given coordinate.\n */\nexport function findUsingDataset(\n  tzData: any,\n  featureCache: MapLike,\n  featureFilePath: string,\n  lat: number,\n  lon: number,\n): string[] {\n  const originalLon = lon\n\n  let err\n\n  // validate latitude\n  if (isNaN(lat) || lat > 90 || lat < -90) {\n    err = new Error('Invalid latitude: ' + lat)\n    throw err\n  }\n\n  // validate longitude\n  if (isNaN(lon) || lon > 180 || lon < -180) {\n    err = new Error('Invalid longitude: ' + lon)\n    throw err\n  }\n\n  // North Pole should return all ocean zones\n  if (lat === 90) {\n    return oceanZones.map((zone) => zone.tzid)\n  }\n\n  // fix edges of the world\n  if (lat >= 89.9999) {\n    lat = 89.9999\n  } else if (lat <= -89.9999) {\n    lat = -89.9999\n  }\n\n  if (lon >= 179.9999) {\n    lon = 179.9999\n  } else if (lon <= -179.9999) {\n    lon = -179.9999\n  }\n\n  const pt = point([lon, lat])\n  const quadData = {\n    top: 89.9999,\n    bottom: -89.9999,\n    left: -179.9999,\n    right: 179.9999,\n    midLat: 0,\n    midLon: 0,\n  }\n  let quadPos = ''\n  let curTzData = tzData.lookup\n\n  while (true) {\n    // calculate next quadtree position\n    let nextQuad\n    if (lat >= quadData.midLat && lon >= quadData.midLon) {\n      nextQuad = 'a'\n      quadData.bottom = quadData.midLat\n      quadData.left = quadData.midLon\n    } else if (lat >= quadData.midLat && lon < quadData.midLon) {\n      nextQuad = 'b'\n      quadData.bottom = quadData.midLat\n      quadData.right = quadData.midLon\n    } else if (lat < quadData.midLat && lon < quadData.midLon) {\n      nextQuad = 'c'\n      quadData.top = quadData.midLat\n      quadData.right = quadData.midLon\n    } else {\n      nextQuad = 'd'\n      quadData.top = quadData.midLat\n      quadData.left = quadData.midLon\n    }\n\n    // console.log(nextQuad)\n    curTzData = curTzData[nextQuad]\n    // console.log()\n    quadPos += nextQuad\n\n    // analyze result of current depth\n    if (!curTzData) {\n      // no timezone in this quad, therefore must be timezone at sea\n      return getTimezoneAtSea(originalLon)\n    } else if (curTzData.pos >= 0 && curTzData.len) {\n      // get exact boundaries\n      let geoJson = featureCache.get(quadPos)\n      if (!geoJson) {\n        geoJson = loadFeatures(featureFilePath, curTzData.pos, curTzData.len)\n        featureCache.set(quadPos, geoJson)\n      }\n\n      const timezonesContainingPoint = []\n\n      for (let i = 0; i < geoJson.features.length; i++) {\n        if (inside(pt, geoJson.features[i])) {\n          timezonesContainingPoint.push(geoJson.features[i].properties.tzid)\n        }\n      }\n\n      // if at least one timezone contained the point, return those timezones,\n      // otherwise must be timezone at sea\n      return timezonesContainingPoint.length > 0\n        ? timezonesContainingPoint\n        : getTimezoneAtSea(originalLon)\n    } else if (curTzData.length > 0) {\n      // exact match found\n      return curTzData.map((idx) => tzData.timezones[idx])\n    } else if (typeof curTzData !== 'object') {\n      // not another nested quad index, throw error\n      err = new Error('Unexpected data type')\n      throw err\n    }\n\n    // calculate next quadtree depth data\n    quadData.midLat = (quadData.top + quadData.bottom) / 2\n    quadData.midLon = (quadData.left + quadData.right) / 2\n  }\n}\n","import type { CacheOptions } from './find'\nimport { findUsingDataset, setCacheLevel } from './find'\n\nconst TZ_DATA = require('../data/timezones-1970.geojson.index.json')\n\n// NOTE: 使わない前提で適当な値に置き換えた\nconst FEATURE_FILE_PATH = undefined\n\nlet featureCache\n\n/**\n * Find the timezone ID(s) at the given GPS coordinates.\n *\n * This find method utilizes the official list of timezones provided in the timezone database.\n * This does not include some \"deprecated\" zones that have different timekeeping methods prior to\n * 1970 than similar zones that otherwise share the same timekeeping method since 1970.\n *\n * @param lat latitude (must be >= -90 and <=90)\n * @param lon longitue (must be >= -180 and <=180)\n * @returns An array of strings of TZIDs at the given coordinate.\n */\nexport function find(lat: number, lon: number): string[] {\n  return findUsingDataset(TZ_DATA, featureCache, FEATURE_FILE_PATH, lat, lon)\n}\n\n/**\n * Set caching behavior.\n *\n * @param {CacheOptions} options cachine options.\n */\nfunction cacheLevel(options?: CacheOptions) {\n  featureCache = setCacheLevel(TZ_DATA, FEATURE_FILE_PATH, options)\n}\n\ncacheLevel()\n\nexport { cacheLevel as setCache }\n\n/**\n * Load all features into memory to speed up future lookups.\n */\nexport function preCache() {\n  cacheLevel({ preload: true })\n}\n"],"names":["oceanZones","tzid","left","right","getTimezoneAtSea","lon","tzs","i","length","z","push","fs","undefined","loadFeatures","featureFilePath","pos","len","fd","file","File","globalThis","geoTzFeatureFilePath","open","offset","buf","readBytes","data","Pbf","decode","featureCache","TZ_DATA","require","cacheLevel","options","tzData","store","get","set","Map","preload","featureFileFd","openSync","Error","preloadFeaturesRecursive","curTzData","quadPos","geoJson","Object","getOwnPropertyNames","forEach","value","lookup","_preCache","closeSync","setCacheLevel","lat","originalLon","isNaN","map","zone","pt","point","quadData","top","bottom","midLat","midLon","nextQuad","timezonesContainingPoint","features","inside","properties","idx","timezones","findUsingDataset","FEATURE_FILE_PATH"],"mappings":"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"}